{"version":3,"sources":["theme/fonts.js","theme/colors.js","components/Typography.js","components/TextLink.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Fonts","Colors","StyledType","styled","span","size","calcFontSize","Typography","props","primitive","children","as","TextLink","a","color","HeaderWrapper","div","HeaderItem","lastChild","firstChild","Header","items","map","index","title","key","toString","length","StyledContainer","link","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.35b24bf0.chunk.js","sourcesContent":["/**\n@flow\n*/\n\ntype FontTypes = {\n\tHeebo: string\n};\n\nexport const Fonts: FontTypes = {\n\tHeebo: 'Heebo'\n};\n","/**\n@flow\n*/\n\ntype ColorTypes = {\n\tgranite: string,\n\twhite: string\n};\n\nexport const Colors: ColorTypes = {\n\tgranite: '#525252',\n\twhite: '#FFFFFF'\n};","/**\n@flow\n*/\nimport * as React from 'react';\nimport styled, {type ReactComponentStyled} from 'styled-components';\nimport { Fonts } from 'theme';\n\ntype Props = {\n\tprimitive?: string,\n\tsize?: string,\n\tchildren: any\n};\n\nconst StyledType: ReactComponentStyled<Props> = styled.span`\n\tfont-family: ${Fonts.Heebo};\n\tfont-size: ${({size}) => calcFontSize(size)}px;\n`;\n\nfunction calcFontSize (size: string) : number {\n\tswitch (size) {\n\t\tcase 'extraLarge':\n\t\t\treturn 64;\n\t\tcase 'large':\n\t\t\treturn 40;\n\t\tcase 'medium':\n\t\t\treturn 24;\n\t\tdefault: \n\t\t\treturn 12;\n\t}\n}\n\nfunction Typography (props: Props) {\n\n\tconst { primitive, children, size } = props;\n\t\n\treturn <StyledType \n\t\tas={primitive || 'span'} \n\t\tsize={size}>\n\t\t\t{children}\n\t</StyledType>;\n\n}\n\nexport default Typography;","// @flow\nimport styled, {type ReactComponentStyled} from 'styled-components';\nimport { Colors, Fonts } from 'theme';\n\ntype Props = {\n\tcolor?: string,\n\tsize?: 'small' | 'large' //defaults to small\n};\n\nconst TextLink: ReactComponentStyled<Props> = styled.a`\n\tfont-family: ${Fonts.Heebo};\n\tfont-size: ${({size}) => size === 'large' ? 20 : 16}px;\n\tcolor: ${({color}) => color || Colors.granite};\n\t&:hover {\n\t\ttext-decoration: underline;\n\t\tcursor: pointer;\n\t}\n`;\n\nexport default TextLink;","// @flow\nimport * as React from 'react';\nimport styled, {type ReactComponentStyled} from 'styled-components';\nimport TextLink from 'components/TextLink';\nimport { Colors } from 'theme/colors';\n\ntype HeaderItemType = {\n\ttitle: string,\n\tlink: string\n};\n\ntype HeaderProps = {\n\titems: Array<HeaderItemType>\n};\n\nconst HeaderWrapper: ReactComponentStyled = styled.div`\n\tbackground-color: ${Colors.granite};\n\tdisplay: flex;\n\tflex-direction: row;\n\tcolor: white;\n\tpadding-top: 20px;\n\tpadding-bottom: 20px;\n\tpadding-left: 20px\n`;\n\nconst HeaderItem: ReactComponentStyled = styled.div`\n\tpadding-right: ${({lastChild}) => lastChild ? 0 : 12}px;\n\tpaddind-left: ${({firstChild}) => firstChild ? 0 : 12}px;\n`;\n\nfunction Header (props: HeaderProps) {\n\treturn <HeaderWrapper>{\n\t\tprops.items.map(({title}, index) => (\n\t\t\t<HeaderItem \n\t\t\t\tkey={index.toString()}\n\t\t\t\tfirstChild={index===0}\n\t\t\t\tlastChild={(index+1) === props.items.length}>\n\t\t\t\t<TextLink color={Colors.white}>\n\t\t\t\t\t{title}\n\t\t\t\t</TextLink>\n\t\t\t</HeaderItem>\n\t\t))\n\t}</HeaderWrapper>;\n}\n\nexport default Header;","// @flow\nimport React from 'react';\nimport Typography from 'components/Typography';\nimport Header from 'components/Header';\nimport styled from 'styled-components';\n\nconst StyledContainer = styled.div`\n\ttext-align: center;\n`; \n\nconst items = [\n\t{ title: 'Home', link: '/' },\n\t{ title: 'Home', link: '/' },\n\t{ title: 'Home', link: '/' },\n\t{ title: 'Home', link: '/' }\n];\n\nfunction App() {\n  return (\n    <StyledContainer>\n    \t<Header items={items} />\n    \t<Typography size=\"large\">Website Coming Soon!</Typography>\n    </StyledContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}